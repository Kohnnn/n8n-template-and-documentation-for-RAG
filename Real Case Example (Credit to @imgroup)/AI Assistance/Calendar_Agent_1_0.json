{
  "name": "Calendar Agent 1.0",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o-2024-11-20",
        "options": {}
      },
      "id": "REDACTED_API_KEY",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -920,
        360
      ],
      "credentials": {
        "openAiApi": {
          "id": "REDACTED_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED_API_KEY",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "REDACTED_API_KEY",
      "name": "Try Again",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "REDACTED_API_KEY",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "REDACTED_API_KEY",
      "name": "Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a calendar assistant. Your responsibilities include creating, getting, and deleting events in the user's calendar.\n\nAll the output need to be in Vietnamese.\n\n**Calendar Management Tools**  \n   - Use \"Create Event with Attendee\" when an event includes a participant.  \n   - Use \"Create Event\" for solo events.   \n   - Use \"Get Events\" to fetch calendar schedules when requested.\n   - Use \"Delete Event\" to delete an event. You must use \"Get Events\" first to get the ID of the event to delete.\n   - Use \"Update Event\" to update an event. You must use \"Get Events\" first to get the ID of the event to update.\n\n## Final Notes\nHere is the current date/time: {{ $now }}\nIf a duration for an event isn't specified, assume it will be one hour."
        }
      },
      "id": "REDACTED_API_KEY",
      "name": "Calendar Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -680,
        100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "l1pfnr9pr9fegbggtkhop3j11c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "C\u00e1 nh\u00e2n planning - test"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "additionalFields": {
          "attendees": [
            "={{ $fromAI(\"eventAttendeeEmail\") }}"
          ],
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', `M\u00f4 t\u1ea3 c\u1ee7a event l\u00e0 n\u1ed9i dung c\u1ee7a l\u1ecbch \u0111\u1ea5y m\u1ed9t c\u00e1ch chi ti\u1ebft h\u01a1n, gi\u1edbi h\u1ea1n trong 20 words \u0111\u1ed5 l\u1ea1i.`, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `N\u1ed9i dung bu\u1ed5i h\u1ecdp (title cu\u1ed9c h\u1ecdp) l\u00e0 ch\u1ee7 \u0111\u1ec1 c\u1ee7a cu\u1ed9c h\u1ecdp m\u1ed9t c\u00e1ch v\u1eafn t\u1eaft, kh\u00f4ng n\u00ean qu\u00e1 10 ch\u1eef (10 words).`, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -220,
        360
      ],
      "id": "REDACTED_API_KEY",
      "name": "Create Event with Attendee",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "REDACTED_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "l1pfnr9pr9fegbggtkhop3j11c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "C\u00e1 nh\u00e2n planning - test"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "useDefaultReminders": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Default_Reminders', `nh\u1eafc nh\u1edf 10 ph\u00fat tr\u01b0\u1edbc khi c\u00f3 task`, 'boolean') }}",
        "additionalFields": {
          "attendees": [],
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', `M\u00f4 t\u1ea3 c\u1ee7a event l\u00e0 n\u1ed9i dung c\u1ee7a l\u1ecbch \u0111\u1ea5y m\u1ed9t c\u00e1ch chi ti\u1ebft h\u01a1n, gi\u1edbi h\u1ea1n trong 20 words \u0111\u1ed5 l\u1ea1i.`, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `N\u1ed9i dung bu\u1ed5i h\u1ecdp (title cu\u1ed9c h\u1ecdp) l\u00e0 ch\u1ee7 \u0111\u1ec1 c\u1ee7a cu\u1ed9c h\u1ecdp m\u1ed9t c\u00e1ch v\u1eafn t\u1eaft, kh\u00f4ng n\u00ean qu\u00e1 10 ch\u1eef (10 words).`, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -360,
        460
      ],
      "id": "REDACTED_API_KEY",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "REDACTED_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "l1pfnr9pr9fegbggtkhop3j11c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "C\u00e1 nh\u00e2n planning - test"
        },
        "timeMin": "={{ $fromAI(\"dayBefore\",\"the day before the date the user requested\") }}",
        "timeMax": "={{ $fromAI(\"dayAfter\",\"the day after the date the user requested\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -500,
        500
      ],
      "id": "REDACTED_API_KEY",
      "name": "Get Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "REDACTED_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "l1pfnr9pr9fegbggtkhop3j11c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "C\u00e1 nh\u00e2n planning - test"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -640,
        480
      ],
      "id": "REDACTED_API_KEY",
      "name": "Delete Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "REDACTED_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "l1pfnr9pr9fegbggtkhop3j11c@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "C\u00e1 nh\u00e2n planning - test"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "updateFields": {
          "end": "={{ $fromAI(\"endTime\") }}",
          "start": "={{ $fromAI(\"startTime\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -780,
        440
      ],
      "id": "REDACTED_API_KEY",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "REDACTED_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -920,
        100
      ],
      "id": "REDACTED_API_KEY",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Event with Attendee": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Events": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Calendar Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "REDACTED_API_KEY",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "REDACTED_API_KEY"
  },
  "id": "fWghMjWWOLfsNbwg",
  "tags": []
}