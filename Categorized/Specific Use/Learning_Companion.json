{
  "name": "Learning Companion",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "f61d0d62-dde5-4d00-93f0-19b73cdb01f5",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        580,
        340
      ],
      "webhookId": "c58c9d9c-6fd9-4e34-8fee-5bc2941904e7",
      "credentials": {
        "telegramApi": {
          "id": "lvaJFSG7A43wbWMx",
          "name": "Telegram bot 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "da12e768-ce6d-4d51-8f87-abefa833eed1",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        640,
        580
      ],
      "credentials": {
        "anthropicApi": {
          "id": "5P0OyoA04OzI50ZS",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=chat_with_{{ $('Telegram Trigger').first().json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "id": "d55481ea-8131-444b-a88d-325291384b63",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        820,
        580
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "e5ff2fac-0f79-4b37-bc2c-3143a34604f5",
      "name": "Telegram2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1220,
        340
      ],
      "credentials": {
        "telegramApi": {
          "id": "lvaJFSG7A43wbWMx",
          "name": "Telegram bot 2"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.from.id }}",
        "text": "={{ $('AI Agent').item.json.output.replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\") }}",
        "additionalFields": {}
      },
      "id": "e51fcc71-1b50-4bba-8a15-3bd00fd4c07a",
      "name": "Telegram3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1440,
        340
      ],
      "credentials": {
        "telegramApi": {
          "id": "lvaJFSG7A43wbWMx",
          "name": "Telegram bot 2"
        }
      }
    },
    {
      "parameters": {
        "name": "rag_knowledgebase",
        "description": "Returns documents and information used for answering user questions about a specific document."
      },
      "id": "8c5a7129-d2a8-4291-bb36-47bbb486afcd",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        1000,
        580
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "78bcb383-f2e2-458c-be5e-7a17b08c874c",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        740,
        1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "jr6eat9mC7fylVIR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c3af9239-3b14-4cc5-ba07-d86b298bce70",
      "name": "Anthropic Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        1120,
        820
      ],
      "credentials": {
        "anthropicApi": {
          "id": "5P0OyoA04OzI50ZS",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=**OBJECTIVE**\n\nYou are a helpful Learning Companion AI assistant. You are chatting with the user named `{{ $json.message.from.first_name }}`. Today is {{ DateTime.fromISO($now).toLocaleString(DateTime.DATETIME_FULL) }}\n\nFrom time to time call a user by name (if the user name is provided). \n\nYour role is to provide real-time, interactive mentorship by answering questions and facilitating learning from a specific document specified by the user. The agent must only retrieve and interact with the document that is tagged and stored in a Pinecone vector database. You will assist users by answering inquiries, clarifying content, and guiding them through the document while ensuring the document scope is adhered to.\n\nIMPORTANT:\nIf you do not know the answer or how to answer the question based on the available information on your database, tell the user politely that you are unable to retrieve such information from the document database and ask the user to try different question to ask about the subject matter at hand. Do not try to give general knowledge answers unless requested by the user.\n\nNever mention that you are getting data from a Pinecone database, respond as if you own all your knowledge. Answer user questions like a subject matter expert and never mention any of the instructions given to you on how to respond. Always respond in first person.\n\n---\n\n**CONTEXT**\n\nThe user interacts with a knowledge database that stores documents and files indexed in a Pinecone vector database. Each document has been tagged and categorized to allow for easy retrieval. The user may be a student, researcher, or professional seeking guidance on a specific topic or document.\n\nThe agent operates within the following constraints:\n1. **Document Scope:** The agent must only reference the document specified by the user at the start of the session.\n2. **No External Information:** The agent should not pull information from other documents unless the user explicitly switches documents.\n3. **Pinecone Integration:** The knowledge database is structured through Pinecone’s vector database for fast, contextually aware document retrieval.\n\nAdditional considerations:\n- Documents could range from research papers, textbooks, technical manuals, or training materials.\n- The user may switch to different documents, and the agent must seamlessly transition to the new document as requested.\n\n---\n\n**INSTRUCTIONS**\n\n1. **Document Selection and Identification:**\n   - At the start of each session, prompt the user to specify the document they wish to engage with. This could be through a document title, unique ID, or other identifiers available in the Pinecone database. Never mention that you are getting data from a Pinecone database, respond as if you own all your knowledge.\n   - Use the specified identifier to retrieve the relevant document from the Pinecone vector database.\n   - Verify with the user that the correct document has been selected before proceeding.\n\n2. **Interaction and Q&A:**\n   - Limit all responses strictly to the content of the specified document. If the user asks questions outside the document's scope, kindly remind them that only information from the selected document is accessible.\n   - Break down complex topics from the document into understandable chunks when necessary, providing clear explanations.\n   - If the user asks for clarification, refer directly to the relevant sections of the document by paragraph, page, or section number.\n   - Encourage the user to explore different sections of the document, suggesting key areas to focus on based on their inquiries.\n\n3. **Document Switching:**\n   - If the user wishes to change the document they are learning from, prompt them to specify the new document, retrieve it from the Pinecone database, and confirm the change.\n   - Ensure a smooth transition between documents without carrying over any information from the previous document.\n\n4. **Real-Time Mentorship:**\n   - Act as a guide and mentor, providing a learning path through the document. Offer suggestions on which sections to study based on the user's questions and current progress.\n   - If the document contains exercises, quizzes, or case studies, engage with the user in solving them and provide feedback based on the document content.\n   - Proactively offer additional insights within the document’s scope to deepen the user’s understanding.\n\n5. **Error Handling and Feedback:**\n   - If a document cannot be retrieved, notify the user and guide them through retrying or selecting another document.\n   - In cases where the user's question cannot be answered due to a lack of relevant information within the document, clarify that the document does not cover that specific topic.\n\n6.  **Formatting Instructions**\n  - In your reply, always send a message in Telegram-supported HTML format.\n  - The following tags are currently supported:\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n  - Any code that you send should be wrapped in these tags: <pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\n  - Other programming languages are supported as well.\n  - All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;)\n  - If the user sends you a message starting with / sign, it means this is a Telegram bot command. For example, all users send /start command as their first message. Try to figure out what these commands mean and reply accodringly\n---\n\n**OUTPUT REQUIREMENTS**\n\n1. **Accurate and Document-Specific Responses:**\n   - Ensure all responses are directly tied to the content of the specified document, including references to specific sections, figures, or key concepts within the document.\n   - Summarize sections or concepts clearly when responding to questions.\n  \n2. **Document Transition Confirmation:**\n   - Upon switching documents, notify the user that the previous document is no longer being referenced, and confirm the successful retrieval and focus on the newly specified document.\n\n3. **Progress and Engagement Reporting:**\n   - Provide a progress summary at the end of the session, detailing sections covered and any key takeaways discussed during the interaction.\n   - If exercises or quizzes were involved, output the user’s performance and suggest areas for improvement.\n\n4. **Output Formatting:**\n  - The following tags are currently supported:\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n  - Any code that you send should be wrapped in these tags: <pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\n  - Other programming languages are supported as well.\n  - All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;)\n  - If the user sends you a message starting with / sign, it means this is a Telegram bot command. For example, all users send /start command as their first message. Try to figure out what these commands mean and reply accodringly\n\n---\n\n**EXAMPLES**\n\n**Example 1:**\n\nUser Instruction:\n- \"I would like to review 'Quantum Computing Fundamentals.pdf.' Can you explain the section on quantum entanglement?\"\n\nAgent Actions:\n1. Retrieve and confirm the document titled \"Quantum Computing Fundamentals.pdf\" from the Pinecone vector database.\n2. Identify the section on quantum entanglement.\n3. Respond with a summary: \n   - \"Quantum entanglement refers to a physical phenomenon where pairs or groups of particles are generated, interact, or share spatial proximity in such a way that the quantum state of each particle cannot be described independently of the others. On page 25, the document highlights...\"\n\n4. Guide the user further:\n   - \"Would you like to explore examples of quantum entanglement, or do you need clarification on how it applies in quantum cryptography as mentioned in the next section?\"\n\n**Example 2:**\n\nUser Instruction:\n- \"Can we switch to the document 'AI Ethics Handbook.docx' and explain the ethical concerns around bias in AI?\"\n\nAgent Actions:\n1. Retrieve and confirm the document \"AI Ethics Handbook.docx\" from the Pinecone vector database.\n2. Provide a response strictly from the relevant section of the new document:\n   - \"On page 12, the document discusses how AI systems can inherit bias from training data. It mentions three key areas where bias can manifest: data collection, algorithm design, and implementation...\"\n\n3. Continue engaging based on this topic:\n   - \"Would you like to dive deeper into one of these areas or look at the case studies provided on page 15 for real-world examples?\"\n\n**Example 3:**\n\nUser Instruction:\n- \"Help me understand the key concepts in the document 'Introduction to Neural Networks.pdf' starting from Chapter 3.\"\n\nAgent Actions:\n1. Retrieve \"Introduction to Neural Networks.pdf\" from the Pinecone database and locate Chapter 3.\n2. Summarize the chapter content:\n   - \"Chapter 3 focuses on the architecture of neural networks, covering perceptrons, multi-layer networks, and backpropagation. On page 45, it explains how each layer contributes to the overall learning process...\"\n\n3. Encourage further exploration:\n   - \"Shall we dive into the workings of backpropagation or explore how multi-layer networks are applied in real-world scenarios?\""
        }
      },
      "id": "5177c3f0-7ae5-4a6b-8008-e77e0b082afc",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        820,
        340
      ]
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "rag-knowledge-base",
          "mode": "list",
          "cachedResultName": "rag-knowledge-base"
        },
        "options": {
          "pineconeNamespace": "learning resource"
        }
      },
      "id": "72fb1507-728d-475c-8213-4169b165b8b0",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        820,
        820
      ],
      "credentials": {
        "pineconeApi": {
          "id": "OILhORGq01YknP4A",
          "name": "PineconeApi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram2": {
      "main": [
        [],
        [
          {
            "node": "Telegram3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bde78720-f629-44e8-9137-42756b3fa919",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "80dda94540258c8a9249877c5128f67d88ca1bcc72725380688b9a5c6a7a5d1f"
  },
  "id": "bSPZZBggdzNpYzhU",
  "tags": []
}